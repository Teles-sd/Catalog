 
		PACMAN

------------------------------------

	MY TERMINOLOGY

$	: Some command to be used on the Terminal (shell).
#	: Some command to be used on the Terminal (shell) as Super User.

<description>	: Replace according to description.
...				: Possible to repeated pattern.

------------------------------------

	LOG & CONFIG FILES

- If experience problems after update, check pacman´s output on:
/var/log/pacman.log

- Configurations in:
/etc/pacman.conf


#Color
#ILoveCandy
#TotalDownload

__________________________________

	MIRRORS

- Manjaro only:
# pacman-mirrors --fasttrack && sudo pacman -Syyu 

- Arch:
# cp /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist-back
# pacman -S reflector
# reflector -l 200 --protocol http --protocol https --sort rate --save /etc/pacman.d/mirrorlist

[!] Make sure the resulting /etc/pacman.d/mirrorlist does not contain entries that you consider untrustworthy before syncing or updating with Pacman.

__________________________________

	MISC CHECKS

- Discover a package's binary:
$ pacman -Qlq <package_name> | grep /usr/bin/

- Query which package owns given files:
$ pacman -Qo <file> ... <file>
$ pacman -Q --owns <file> ... <file>



- Pacman Version:
$ pacman -V
$ pacman --version


 .--.                  Pacman
/ _.-' .-.  .-.  .-.   Copyright (C) 2006-2020 Pacman Development Team
\  '-. '-'  '-'  '-'   Copyright (C) 2002-2006 Judd Vinet
 '--'
                       This program may be freely redistributed under
                       the terms of the GNU General Public License.


- Safely print a list of pending updates:
$ checkupdates

- Download pending updates to the pacman cache:
$ checkupdates -d
$ checkupdates --download

- Display this help message:
$ checkupdates -h
$ checkupdates --help



__________________________________

	OPERATIONS & OPTIONS


- These commands are grouped by Operations.
- Operations use flags with upper-case.
- Only one Operation can be done at-a-time.
- Options use flags with lower-case.
- Many Options can be combined in one Operation.


HELP

- Display general syntax or syntax for the given operation:
$ pacman -h
$ pacman -h <operation>
$ pacman --help




QUERY

- Search on local packages matching all terms:
$ pacman -Qs <terms> ... <terms>

- Find the binary files for a Terminal command:
$ which <command>

- Query which package owns given files:
$ pacman -Qo <file> ... <file>
$ pacman -Q --owns <file> ... <file>

- Information on a local package.
- Two -ii shows list of backup files and their modification states.
$ pacman -Qi <package>
$ pacman -Qii <package>
$ pacman -Q --info <package>

- Query list of dependencies unrequired (orphans):
$ pacman -Qdt
$ pacman -Q --deps --unrequired

- Query explicitly installed packages:
$ pacman -Qe
$ pacman -Q --explicit

- Query files owned by package(s):
$ pacman -Ql <package>
$ pacman -Q --list <package>

- Query foreign packages.
- Packages not found in the sync database.
$ pacman -Qm
$ pacman -Q --foreign

- Query quietly (less information, useful for scripts):
$ pacman -Qq

- Query out-of-date packages:
$ Pacman -Qu
$ Pacman -Q --upgrades




REMOVE

- Remove package if it´s not required AND not explicitly installed dependencies, with no backup:
# pacman -Rsn <package>
# pacman -R --recursive --nosave <package>


- Remove unrequired dependencies:
# pacman -Rsn "$(pacman -Qtdq)"



SYNC

- Search in sync database packages matching all terms:
$ pacman -Ss <terms> ... <terms>

- Install package(s):
# pacman -S <package>
# pacman -S <package> ... <package>

- Update master package database and full system upgrade.
- Two -yy force refresh of all packages database.
- Can also install new packages together with the upgrade.
- DO NOT USE ´pacman -Sy <package>´, as this could lead to dependencies errors.
# pacman -Syu
# pacman -Syu <package> ... <package>
# pacman -S --refresh --sysupgrade

- Information on a package from the sync database.
- Two -ii also displays packages that depend on it.
$ pacman -Si <package>
$ pacman -Sii <package>
$ pacman -S --info <package>

- Removes no longer installed packages from cache.
- Two -cc fully clears cache
- (more info & better way to do this on section bellow)
# pacman -Sc
# pacman -Scc
# pacman -S --clean

- List packages in specified repository:
$ pacman -Sl <repo>
$ pacman -S --list <repo>



OTHERS

- List dependencies not currently satisfied:
$ pacman -T
$ pacman --deptest




__________________________________

	FILES .PACNEW & .PACSAVE

- A .pacnew file may be created during upgrade to avoid overwriting a file which already exists and was previously modified by the user.

- A .pacsave file may be created during a package removal.
- Use of the -n option with pacman -R will result in complete removal of all files in the specified package, therefore no .pacsave files will be created.

- These files require manual intervention from the user.
- It is a good practice treat them immediately after upgrades or removal of packages.
- If not treated, inadequate Configurations might result in malfunction of a software or prevent it to fully function.


- To find .pac* files, ue pacman's log:
$ grep --extended-regexp "\.pac(new|save)" /var/log/pacman.log




MANAGING FILES .pac*

- Pacman-contrib (from ´pacman´ package)  provides a tool to manage these files.
- It can search ALL .pacnew and .pacsave files and ask for what to do.
- It uses ´vimdiff´ by default, but a different diff tool can be specified.
- (just use Meld, it´s pretty good)

# DIFFPROG=meld pacdiff


__________________________________

	CLEANING THE CACHE


- When pacman downloads packages, it saves them in a cache directory, including old packages.

- Cache directory:
/var/cache/pacman/pkg

- This cache can be useful to re-install older packages in an emergency.
- However, left unchecked, this will grow very large over time.

- Systems running Pamac will already have access to it´s automated pacman cache cleaning functions.



- Pacman can remove packages that are no longer installed from the cache as well as currently unused sync databases:
# pacman -Sc 

- Or remove all files from the cache (and use with care):
# pacman -Scc 



- A safer way to remove old package cache files is to use paccache to [r]emove all packages, [v]erbose, [k]eeping a number of latest package versions:

$ paccache -rvk 3
$ paccache -rvk <num> 






__________________________________

	YAY

- Managing the AUR.

!!! WARNING:
             DO NOT use ´sudo´ with the yay command. If Yay needs premission, it will ask for it.

- Most Options and Operation from Pacman work the same way on Yay.

- GitHub Repo:
url: (https://github.com/Jguer/yay)



INSTALLATION

(Arch)
$ cd ~/Coding/AUR/
$ git clone https://aur.archlinux.org/yay.git
$ cd yay
$ makepkg -si

(Manjaro)
# pacman -Syu yay




CUSTOM COMMMANDS

- Make an Operation with Yay acting only on AUR packages:
$ yay -<operation> --aur

- Print system statistics:
$ yay -Ps
$ yay -P --stats

- Clean unneeded dependencies:
$ yay -Yc
$ yay -Y --clean





__________________________________



__________________________________



__________________________________



__________________________________



__________________________________




