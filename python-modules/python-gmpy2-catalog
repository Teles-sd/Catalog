
		GMPY2

------------------------------------

	PACKAGES

[pacman]	python-gmpy2
			Provides C-coded Python modules for fast multiple-precision arithmetic.
			
			
[conda]		gmpy2
			GMP/MPIR, MPFR (Multiple Precision Floating-point Rounding), and MPC interface to Python 2.6+ and 3.x




- Imports:
>>> import gmpy2

>>> from gmpy2 import mpfr
>>> from gmpy2 import sqrt
>>> from gmpy2 import sin, cos
>>> from gmpy2 import exp, exp2, exp10
>>> from gmpy2 import const_pi, const_euler
>>> from gmpy2 import log, log2, log10


----------------------------------

	REFERENCE

- Home Page:
url: (https://github.com/aleaxit/gmpy)

- Documentation (mpfr):
url: (https://gmpy2.readthedocs.io/en/latest/mpfr.html)


----------------------------------


	MANAGE CONTEXTS

- Get active context object:
>>> <ctx> = gmpy2.get_context()

- Display active context:
>>> gmpy2.get_context()

- Create a new context, with all options to default:
>>> <ctx> = gmpy2.context()
>>> <ctx> = gmpy2.context(precision=<value>)

- Set active context:
>>> gmpy2.set_context( <ctx> )

- Reset active context:
>>> gmpy2.set_context(gmpy2.context())




- Alter a context's attribute:
>>> <ctx>.<attribute> = <value>

- Alter active context's attribute:
>>> gmpy2.get_context().<attribute> = <value>


Context Attributes:

precision - specified in bit.
			The maximum precision that can be specified is platform dependent and can be retrieved with gmpy2.get_max_precision().


round - 
		0 - RoundToNearest: ties are rounded to an even value
		1 - RoundToZero: rounded towards 0.0
		2 - RoundUp: rounded towards +Infinity
		3 - RoundDown: rounded towards -Infinity
		4 - RoundAwayZero: rounded away from 0.0




...



(https://gmpy2.readthedocs.io/en/latest/mpfr.html)



- Get the context according to IEEE-754 (Floating-Point Representation Standards):
>>> gmpy2.ieee(32)
>>> gmpy2.ieee(64)
>>> gmpy2.ieee(128)


----------------------------------

	MULTIPLE-PRECISION REALS


- The default precision of an mpfr is 53 bits.

-To take advantage of higher precision provided by the mpfr type, always pass constants as strings.



- Create a mpfr type:
>>> mpfr('<number>')


- Square root:
>>> sqrt( <number> )


- Trigonometric Functions (single values only):
>> sin(<degree>)
>> cos(<degree>)


- Exponentials:
>>> exp(<number>)			# e^x
>>> exp2(<number>)			# 2^x
>>> exp10(<number>)			# 10^x


- Constants:
>>> const_pi(<precision>)
>>> const_euler(<precision>)


- Logarithm:
>>> log(<number>)			# natural log(x)
>>> log2(<number>)			# base-2 log(x)
>>> log10(<number>)			# base-10 log(x)



----------------------------------

	MY FUNCTIONS

- Some short-hand functions I made:

set_mpfr(bits):
	global gmpy2
	gmpy2.set_context(gmpy2.context(precision=bits))

def mp(num):
    return mpfr(str(num))

def backf(num, digits=5):
    return float(round(num, digits))

def listf( l ):
    return list(map(backf, l))

def listf( l,  digits=5):
    return list(map(lambda x: backf(x, digits), l))

def backf(val, digits=5):
    return list(map(lambda x: backf(x, digits), val)) if isinstance(val, list) else float(round(val, digits))

def backf(val, digits=8):
    return list(map(lambda x: backf(x, digits), val)) if isinstance(val, (list, np.ndarray)) else float(round(val, digits))


----------------------------------



----------------------------------



----------------------------------



----------------------------------

