
		GIT

------------------------------------

	HELP

- Help and Manuals:
$ git help
$ git help <command>


url: (https://git-scm.com/docs)
merge branches?
git help merge

------------------------------------

	GLOSSARY

- Repository (aka. Local Repository):
	A Git Repository is the '.git/' directory inside a project, containing all the necessary repository files.

- Work-tree (aka. Workspace, Working Directory):
	Place where the files of a project's Repository are.

- Path component:
	Directories and subdirectories inside the Work-tree that lead to a file.

- Top level:
	The path to the Work-tree.

- Index (aka. Staging Area):
	Where the files from the project that will be commited are placed.
	Those files in the Index are called "Staged Files".
	The ones not added are "Untracked Files".
	Files can be added and removed from Index at will, before commiting.

- Commit (aka. Revision):
	Record of changes to the Repository's files.
	Commits usually contain a brief message/description.
	Each Commit creates a ID (aka. SHA, hash) to keep record of what changed, when and by who.

- Branch:
	

- Remote (aka. Upstream Repository):
	

- Path name:
	A file inside the Commits (inside the Repository) have a Path name.
	The Path name is all the Path from the Top level to where this file is in the Work-tree.
	Never start with slash. As: "path/to/file".
	
	Git don't store files or directories with a '.git/' Path componet. Thus, a Repository don't store another Repositories within it.
	You can create a Git Repository within the Work-tree of another Git repository, but you can't add and commit it to the other.

- Nested repository:
	A Repository (and Work-tree) that is in another Repository's Work-tree.

- Submodules:
	A Git Repository that is refered to in another Git Repository.



------------------------------------

	QUICK START AND BASIC MANAGEMENT

- Create a local repository:
$ cd <path-to-repo>
$ git init

- Add a remote repository (must be previously created on the github website):
$ git remote add <name> <url>
$ git remote add origin https://github.com/<user>/<repo>

- Display remotes:
$ git remote -v

- Update branches seen from remote repository:
$ git fetch

- Fetch from another repository or local branch and Update (integrate) local repo:
$ git pull <remote> <branch>
$ git pull origin master

- List remote branches in repo:
$ git branch -r

- Update commit with all contents from the working tree:
$ git add .

- Display updates to the index:
$ git status

- Creates commit (to current working branch) with the contents of the index and a log message:
$ git commit -m "<log-message>"

- List local branches in repo:
$ git branch

- List all branches:
$ git branch -a

- Update a remotes with a branch:
$ git push <remote> <branch>
$ git push origin master


------------------------------------

	INDEX, COMMITS & LOCAL REPOSITORIES

- Display current Branch and Index (staged and untracked files):
$ git status

- Add all files in a directory (or some specific file) to Index:
$ git add .
$ git add <file>

- Remove a Staged File from the Index:
$ git restore --staged <file>

------------------------------------


- Download from a remote repository (master branch):
$ git clone <url>

- Download a specific branch from a remote repository:
$ git clone -b <branch> <url>

- Create new branch:
$ git branch <new-branch-name>

- Check and update branch to work in:
$ git checkout <branch>
$ git checkout master

- Delete branch:
$ git branch -d <branch-name>
$ git branch -rd <remote-branch-name>

- Switch branch:
$ git switch <branch>

- Armazenar senha do github em cache (padrão: 15 min):
$ git config --global credential.helper cache

- Alterar o tempo limite padrão do cache da senha( <time> em segundos):
$ git config --global credential.helper 'cache --timeout=<time>'


------------------------------------

