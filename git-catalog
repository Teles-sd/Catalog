
		GIT

continue: 
	revert
	rebase
	remote
	pull
	fetch
	push
	clone
	(https://ndpsoftware.com/git-cheatsheet.html#loc=workspace;)
------------------------------------

	HELP

- Help and Manuals:
$ git help
$ git help <command>

- Official Glossary (confusing a.f.):
$ man gitglossary
$ git help gitglossary

- More info on spell Commits:
$ man gitrevisions
$ git help gitrevisions

url: (https://git-scm.com/docs)

------------------------------------

	GLOSSARY

- Repository (aka. Local Repository):
	A Git Repository is the '.git/' directory inside a project, containing all the necessary repository files.

- Work-tree (aka. Working-tree, Workspace, Working Directory):
	Place where the files of a project's Repository are.

- Path component:
	Directories and subdirectories inside the Work-tree that lead to a file.

- Top level:
	The path to the Work-tree.

- Index (aka. Staging Area):
	Where the files from the project that will be commited are placed.
	Those files in the Index are called "Staged Files".
	The ones not added are "Untracked Files".
	Files can be added and removed from Index at will, before commiting.

- Commit (aka. Revision):
	Record of changes to the Repository's files.
	Commits usually contain a brief message/description.
	Each Commit creates a ID (aka. SHA, hash) to keep record of what changed, when and by who.

- Branch:
	A succession of Commits on the project.
	An active Line of development.
	A Git Repository can have any number of Branches.

- HEAD (aka. tip of that Branch):
	Points to the last Commit to the current Branch.

- Clean Work-tree:
	When a Working-tree corresponds to the current HEAD, i.e. all it's modifications have been committed to the current Branch.

- Dirty Work-tree:
	When a Work-tree contains modifications which have not been committed to the current Branch.

- Remote (aka. Remote Repository, Upstream Repository):
	A Repository to track the project, but residing somewhere else.

- Fetch:
	Get a Branchesâ€™s head ref from a Remote repository.
	To find out which objects are missing from the local Repository.

- Push:
	Updating a Remote Branch with a local Branch's content.
	If the Remote head is not ancestor to the local head, the push fails.

- Merge:
	Incorporate on current Branch changes from other Branch's commit since the time their histories diverged.
	Record the result in a new commit.

- Path name:
	A file inside the Commits (inside the Repository) have a Path name.
	The Path name is all the Path from the Top level to where this file is in the Work-tree.
	Never start with slash. As: "path/to/file".
	
	Git don't store files or directories with a '.git/' Path componet. Thus, a Repository don't store another Repositories within it.
	You can create a Git Repository within the Work-tree of another Git repository, but you can't add and commit it to the other.

- Nested repository:
	A Repository (and Work-tree) that is in another Repository's Work-tree.

- Submodules:
	A Git Repository that is refered to in another Git Repository.



------------------------------------

	QUICK START AND BASIC MANAGEMENT

- Create a local Repository:
$ cd <path>
$ git init

- Add a Remote (previously created on the Github website):
$ git remote add <name> <url>
$ git remote add origin https://github.com/<user>/<repo>

- Display Remotes:
$ git remote -v

- Update Branches seen from Remote:
$ git fetch <remote>

- Fetch and Merge Branch from a Remote:
$ git pull <remote> <branch>
$ git pull origin master

- Add all files from the Work-tree to Index:
$ git add .

- Display updates to the Index:
$ git status

- Commit contents of Index to current Branch, with a log message:
$ git commit -m '<log-message>'

- List local Branches in Repository:
$ git branch

- List Remote Branches:
$ git branch -r

- List all Branches:
$ git branch -a

- Update a Remote Branch with the current Branch's contents:
$ git push <remote> <branch>
$ git push origin master


------------------------------------

	WORK-TREE, INDEX, COMMITS & LOCAL REPOSITORIES

- Display current Branch and Index (staged and untracked files):
$ git status

- Display Index together with Work-tree:
$ git ls-files

- Add all files (or some specific file) from the Work-tree to Index:
$ git add .
$ git add <file>
$ git add <file> ... <file>

- Updated all tracked files in Working-tree to Index:
$ git add -u
$ git add --update

- Remove file from Work-tree and Index:
$ git rm <file>

- Move file from Work-tree and Index:
$ git mv <file> <destination>

- Commit contents of Index to current Branch, with a log message:
$ git commit -m '<log-message>'

- Commit that only records the changes made to a Path name (ignore Index):
$ git commit <path-name>

- Don't commit, show summary of what's included on next commit:
$ git commit --dry-run

- Display Commit history from current Branch (chronological order):
$ git log

- Display compact graph of all Branches:
$ git log --graph --all --oneline

- View changes in Work-tree or specific file, relative to a Commit:
$ git diff <commit>
$ git diff <commit> <file>
$ git diff HEAD



RESTORE FILES

- Restore a File to Work-tree (restored from Index, default):
$ git restore <file>
$ git restore --worktree <file>
$ git restore -W <file>

- Unstage a Staged File from the Index (restored from HEAD):
$ git restore --staged <file>
$ git restore -S <file>

- Restore a File to Index and (restored from HEAD):
$ git restore -SW <file>

- Restore to Work-tree from a previous Commit:
$ git restore --source <commit> <file>

- Restore to Work-tree and Index from a previous Commit:
$ git restore --source <commit> -WS <file>



RESET INDEX OR WORK-TREE

- Reset Index (not Working-tree) to current HEAD (default):
$ git reset
$ git reset --mixed

- Reset current HEAD (not Index, nor Working-tree) to a previous Commit:
$ git reset --soft <commit>

- Reset Index and Work-tree (and thus, HEAD) to a previous Commit:
$ git reset --hard <commit>



REVERT COMMITS

- Make a new Commit reverting the HEAD to a previous Commit (requieres Clean Work-tree):
$ git revert <commit>

git help revert
git-revert(1) is about making a new commit that reverts the changes made by other commits.



(See "Reset, restore and revert" in 'git(1)' for the differences between the three commands.)



MORE LOG

- Display a log graph for the Commits and Merges (not chronological order, topological ordering):
$ git log --graph

- Compact Log:
$ git log --oneline

- Log of all Branches:
$ git log --all

- Show only Commits done on the current Branch (excluding Commits done on other Branches before Merging):
$ git log --first-parent

- "Pretty" Log:
$ git log --pretty="format:%h %ar %s"



------------------------------------

	SPELL COMMITS

- How to refer to a specific Commit.

- By SHA-1:
	The full SHA-1 object name (40-byte hexadecimal string), or it's short version (a leading substring that is unique within the Repository).
	
	See it's short version with:
	$ git log --oneline
	Or, it's full version with:
	$ git log

- Refnames:
	HEAD - last Commit of current Branch
	FETCH_HEAD - Branch fetched from Remote with last 'git fetch'
	ORIG_HEAD - records Commit before a operation that move the HEAD in a drastic way (what ever that means), eg. 'git merge'.
	MERGE_HEAD - records Commit of Branch that merges into current Branch when run 'git merge'.
	CHERRY_PICK_HEAD - records the Commit of 'git cherry-pick' (?).
	
	<branch-name> - will refer to a Branch's HEAD
	@ - with no refname given, refer to current Branch's HEAD
	
- Refnames for prior Commits:
	<refname>@{<n>}
		A Refname with the suffix '@' and a number (n) refers the n-th prior Commit of that ref.
		If no Refname is given, considers current Branch's HEAD.
		Follows chronological order as in 'git log'.
	
	<commit>^{<n>}
		A Commit with the suffix '^' and a number (n) refers the n-th parent of that Commit.
		DOES NOT Follow chronological order as in 'git log --graph'.
		
		('<commit>^' is equivalent to '<commit>^1')
		('<commit>^0' means the commit itself)
	
	<commit>~{<n>}
		A Commit with the suffix '^' and a number (n) refers the n-th ancestor of that Commit, following only the first parents.
		DOES NOT Follow chronological order as in 'git log --graph'.
		
		I.e.  '<commit>~3' is equivalent to '<commit>^^^' which is equivalent to '<commit>^1^1^1', but NOT '<commit>^3'.
	
		Example:
		Consider that:
		- Commit F recieves a Commit and becomes E.
		- Commit E recieves a Commit and becomes B.
		- Commit B merges C, D and E; and becomes A.
		
		A---.
		| \  \
		B  C  D
		|
		E
		|
		F
		
		In this case:
		A^1 = B		= A^
		A^2 = C
		A^3 = D
		
		A~1 = B
		A~2 = E
		A~3 = F		= A^^^ = A^1^1^1
		
	

------------------------------------

	BRANCHES

- List local Branches in Repository:
$ git branch
$ git branch -l
$ git branch -l '<pattern>'

- List Remote Branches:
$ git branch -r

- List all Branches:
$ git branch -a



- Create a new Branch (from current HEAD, or previous commit):
$ git branch <branch>
$ git branch <branch> <commit>

- Rename Branch:
$ git branch -m <branch> <new-name>
$ git branch --move <branch> <new-name>

- View changes in Work-tree relative to the tip of another Branch:
$ git diff <branch>

- Switch Branch (updates Index and Work-tree match Branch):
$ git switch <branch>

- Delete Branch:
$ git branch -d <branch>

- Delete Branch even if current Branch doesn't have all commits from it:
$ git branch -D <branch>



WARNING: Running 'git merge' with uncommitted changes is discouraged (Dirty Work-tree).

- Merge current Branch with other Branch's commit (if the other Branch's name is passed, it's HEAD is the commit used):
$ git merge <commit>
$ git merge -m '<log-message>' <commit>
$ git merge <branch>
$ git merge -m '<log-message>' <branch>

- If (and only if) the merge has resulted in conflicts, the following commands are available:
$ git merge --continue
$ git merge --abort
$ git merge --quit



------------------------------------

	REMOTES

- Add a Remote (previously created on Github website) to Local Repository:
$ git remote add <name> <url>
$ git remote add origin https://github.com/<user>/<repo>

- Display Remotes:
$ git remote -v

--
$ git branch -rd <remote>/<branch>
$ git branch -r -l '<remote>/<pattern>'



- Update Branches seen from Remote:
$ git fetch <remote>

- Fetch and Merge Branch from a Remote:
$ git pull <remote> <branch>
$ git pull origin master




- Push to a Remote Branch:
$ git push <remote> <branch>




- Download Repository a Remote (master branch):
$ git clone <url>

- Download a specific Branch from a Remote:
$ git clone -b <branch> <url>




------------------------------------




------------------------------------




------------------------------------

	MISC

- Armazenar senha do github em cache (padrÃ£o: 15 min):
$ git config --global credential.helper cache

- Alterar o tempo limite padrÃ£o do cache da senha( <time> em segundos):
$ git config --global credential.helper 'cache --timeout=<time>'


------------------------------------

